********************
:mod:`parameterizer`
********************


.. function:: assign_identical_qtl_parameters(multi_pop, number_of_qtl,qtl_subset, ae_parameters)

    Assigns each replicate in a population the same set of QTL and
    corresponding allele effects.

    :param multi_pop: A simuPOP Simulator object with multiple replicates.
    :param number_of_qtl: Number of loci to declare as QTL
    :param qtl_subset: List of loci which can be chosen as QTL
    :param ae_parameters: Parameters of the allele effect distribution

Adapting QTL and Allele Effects to Multiple Replicate Case
----------------------------------------------------------

.. code:: python

    multipop = sim.Simulator(pop, sim_params['number_of_replicates'])
    multi_meta = sim.Simulator(nam, sim_params['number_of_replicates'], stealPops=False)

Assign Each Replicate Identical Parameters
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

    Determines a single random set of QTL/allele effects and assigns the
    same information to every replicate.

.. code:: python

    def assign_identical_qtl_parameters(multi_pop, number_of_qtl, qtl_subset, ae_parameters):
        """
        Assigns each replicate in a population the same exact set of QTL and corresponding
        allele effects.

        :param multi_pop: simuPOP Simulator object containing multiple replicates.
        :param number_of_qtl: Number of loci to declare as QTL
        :param qtl_subset: List of loci which can be chosen as QTL
        :param ae_parameters: Parameters of the allele effect distribution.



        """
        triplet_qtl = {i: [] for i in range(multipop.numRep())}
        single_pop = multi_pop.population(0)
        sim.stat(single_pop, numOfSegSites=integral_valued_loci, vars=['numOfSegSites', 'segSites'])
        qtl = parameterizer.seg_qtl_chooser(single_pop, integral_valued_loci, qtl_params['qtl'])

        for i, pop_rep in enumerate(multipop.populations()):
            for locus in qtl:
                triplet_qtl[i].append(locus - 1)
                triplet_qtl[i].append(locus)
                triplet_qtl[i].append(locus + 1)

.. code:: python

    triplet_qtl = {i: [] for i in range(multipop.numRep())}
    single_pop = multipop.population(0)
    sim.stat(single_pop, numOfSegSites=integral_valued_loci, vars=['numOfSegSites', 'segSites'])
    qtl = parameterizer.seg_qtl_chooser(single_pop, integral_valued_loci, qtl_params['qtl'])
    print(qtl)
    print(triplet_qtl[0], triplet_qtl[1])


.. parsed-literal::

    [579, 1921, 2026, 3301, 3366, 3541, 4211, 5383, 7037, 7232]
    [] []


.. code:: python

    for i, pop_rep in enumerate(multipop.populations()):
        for locus in qtl:
            triplet_qtl[i].append(locus - 1)
            triplet_qtl[i].append(locus)
            triplet_qtl[i].append(locus + 1)
    print(triplet_qtl[0])
    print(triplet_qtl[1])


.. parsed-literal::

    [578, 579, 580, 1920, 1921, 1922, 2025, 2026, 2027, 3300, 3301, 3302, 3365, 3366, 3367, 3540, 3541, 3542, 4210, 4211, 4212, 5382, 5383, 5384, 7036, 7037, 7038, 7231, 7232, 7233, 578, 579, 580, 1920, 1921, 1922, 2025, 2026, 2027, 3300, 3301, 3302, 3365, 3366, 3367, 3540, 3541, 3542, 4210, 4211, 4212, 5382, 5383, 5384, 7036, 7037, 7038, 7231, 7232, 7233]
    [578, 579, 580, 1920, 1921, 1922, 2025, 2026, 2027, 3300, 3301, 3302, 3365, 3366, 3367, 3540, 3541, 3542, 4210, 4211, 4212, 5382, 5383, 5384, 7036, 7037, 7038, 7231, 7232, 7233, 578, 579, 580, 1920, 1921, 1922, 2025, 2026, 2027, 3300, 3301, 3302, 3365, 3366, 3367, 3540, 3541, 3542, 4210, 4211, 4212, 5382, 5383, 5384, 7036, 7037, 7038, 7231, 7232, 7233]



All done!